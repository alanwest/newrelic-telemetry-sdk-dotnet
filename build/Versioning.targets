<Project>
  <PropertyGroup>
    <!-- Ignore SemVer 2.0.0 not supported on legacy NuGet clients -->
    <NoWarn>$(NoWarn);NU5105</NoWarn>
  </PropertyGroup>

  <Target Name="VersionByGitTag">
    <PropertyGroup Condition="$(GitTagPrefix) == ''">
      <GitTagPrefix>v</GitTagPrefix>
    </PropertyGroup>

    <Exec Command="git describe --match $(GitTagPrefix)[0-9]* --abbrev=0 HEAD --tags" ConsoleToMSBuild="true" StandardOutputImportance="low" IgnoreExitCode="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="LatestTagVersion" />
      <Output TaskParameter="ExitCode" PropertyName="GitExitCode" />
    </Exec>
    <Warning Condition="'$(GitExitCode)' > '0'" Text="No tag with prefix '$(GitTagPrefix)' found. Defaulting to version 1.0.0." />

    <Exec Condition="'$(GitExitCode)' == '0'" Command="git rev-list $(LatestTagVersion)..HEAD --count HEAD" ConsoleToMSBuild="true" StandardOutputImportance="low">
      <Output TaskParameter="ConsoleOutput" PropertyName="GitCommitCount" />
    </Exec>

    <PropertyGroup Condition="$(GitExitCode) == 0">
      <Revision>$(GitCommitCount)</Revision>
    </PropertyGroup>

    <PropertyGroup Condition="$(GitExitCode) != 0">
      <Revision>0</Revision>
      <LatestTagVersion>1.0.0</LatestTagVersion>
    </PropertyGroup>

    <ParseVersion VersionString="$(LatestTagVersion.Replace('$(GitTagPrefix)',''))">
      <Output PropertyName="Major" TaskParameter="Major" />
      <Output PropertyName="Minor" TaskParameter="Minor" />
      <Output PropertyName="Build" TaskParameter="Patch" />
      <Output PropertyName="PreReleaseMoniker" TaskParameter="PreReleaseMoniker" />
    </ParseVersion>

    <PropertyGroup Condition="$(PreReleaseMoniker) == '' And $(Revision) > 0">
      <PreReleaseMoniker>unreleased</PreReleaseMoniker>
    </PropertyGroup>

    <PropertyGroup>
      <PreReleaseMonikerFormatted Condition="'$(PreReleaseMoniker)' != ''">-$(PreReleaseMoniker)</PreReleaseMonikerFormatted>
      <PreReleaseRevisionFormatted Condition="'$(PreReleaseMoniker)' != '' And '$(Revision)' != '0'">.$(Revision)</PreReleaseRevisionFormatted>
      
      <!-- Follows best practices from: https://docs.microsoft.com/en-us/dotnet/standard/library-guidance/versioning -->
      <Version>$(Major).$(Minor).$(Build).$(Revision)</Version>
      <AssemblyVersion>$(Major).0.0.0</AssemblyVersion>
      <FileVersion>$(Major).$(Minor).$(Build).$(Revision)</FileVersion>
      <PackageVersion>$(Major).$(Minor).$(Build)$(PreReleaseMonikerFormatted)$(PreReleaseRevisionFormatted)</PackageVersion>
    </PropertyGroup>
  </Target>

    <UsingTask TaskName="ParseVersion" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <VersionString ParameterType="System.String" Required="true" />
      <Major ParameterType="System.Int32" Output="true" />
      <Minor ParameterType="System.Int32" Output="true" />
      <Patch ParameterType="System.Int32" Output="true" />
      <PreReleaseMoniker ParameterType="System.String" Output="true" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
        var preReleaseMonikerStart = VersionString.IndexOf('-');
        var preReleaseMonikerLength = preReleaseMonikerStart < 0 ? 0 : VersionString.Substring(preReleaseMonikerStart).Length;
        var preReleaseMonkier = preReleaseMonikerLength == 0 ? "" : VersionString.Substring(preReleaseMonikerStart + 1);
        var majorVersionStart = 0;
        var majorVersionLength = VersionString.IndexOf('.', majorVersionStart);
        var minorVersionStart = 1 + majorVersionLength;
        var minorVersionEnd = VersionString.IndexOf('.', minorVersionStart);
        var minorVersionLength = minorVersionEnd - minorVersionStart;
        var patchVersionStart = 1 + minorVersionEnd;
        var patchVersionEnd = VersionString.Length - preReleaseMonikerLength;
        var patchVersionLength = patchVersionEnd - patchVersionStart;
        Major = int.Parse(VersionString.Substring(majorVersionStart, majorVersionLength));
        Minor = int.Parse(VersionString.Substring(minorVersionStart, minorVersionLength));
        Patch = int.Parse(VersionString.Substring(patchVersionStart, patchVersionLength));
        PreReleaseMoniker = preReleaseMonkier;
        ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>
